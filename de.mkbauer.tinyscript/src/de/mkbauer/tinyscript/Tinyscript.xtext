grammar de.mkbauer.tinyscript.Tinyscript with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate ts "http://www.mkbauer.de/tinyscript/Tinyscript"

Tinyscript:
	elements=SourceElements
;

SourceElements:
	{SourceElements}
	(statements += Statement)? (';' statements += Statement)* (';')?
;

Block: 
	'{' sourceelements=SourceElements '}'	
;

Statement:
	VariableStatement | ExpressionStatement | ReturnStatement
;

ExpressionStatement:
	AssignmentExpression 
	// | FunctionExpression
;

AssignmentExpression:
	lhs=Addition ('=' rhs=ExpressionStatement)?	
;

Addition:
	expr1=Multiplication (ops+=('+' | '-') exprs += Multiplication)*
;

Multiplication:
    expr1=UnaryOrPrimary  (ops+=('*' | '/') exprs += UnaryOrPrimary)*
;

UnaryOrPrimary :
	expr=Atomic |
    expr=VariableOrMember |
    expr=Unary |
    '(' expr=Addition ')'
;

Unary:
	'-' expr=UnaryOrPrimary
;

Atomic:
	IntegerLiteral |
	DoubleLiteral |
    StringLiteral |
    ObjectInitializer |
    FunctionExpression |
    ExternalFunctionExpression
;

FunctionExpression:
	'function' '(' params=FormalParameterList? ')' block=Block 
;

ExternalFunctionExpression:
	'external' '(' params=FormalParameterList? ')' name=StringLiteral
;

FormalParameterList:
	(params += Variable) (',' params += Variable)*
;

ReturnStatement:
	{Return}
	'return' (expr=AssignmentExpression)?
;

VariableStatement:
	'var' vardecllist=VariableDeclarationList
;

VariableDeclarationList:
	(vardecls += VariableDeclaration) (',' vardecls += VariableDeclaration)*
;

VariableDeclaration:
	var=Variable ('=' expr=AssignmentExpression)?
;

VariableOrMember:
	name=[Variable] (membersuffixes+=MemberSuffix)* (callsuffixes+=CallSuffix)*  
;

Variable:
	name=ID
;

CallSuffix:
	{CallSuffix}
	'(' arguments=ArgumentList? ')' (membersuffixes+=MemberSuffix)*
;

ArgumentList:
	(arguments += AssignmentExpression) (',' arguments += AssignmentExpression)*
;

MemberSuffix:
	'[' expr=Addition ']' | // TODO: AssignmentExpression?
	'.' name=ID
;

ObjectInitializer:
	{ObjectInitializer}
	'{' (propertyassignments+=PropertyAssignment)? (',' propertyassigments+=PropertyAssignment)* '}'
;

PropertyAssignment:
	key=PropertyName ':' value=Atomic
;

PropertyName:
	expr=StringLiteral |
	name=ID
;

StringLiteral:
	value=STRING
;

IntegerLiteral:
    value=INT
;

DoubleLiteral:
	value=DOUBLE
;

terminal DOUBLE returns ecore::EDouble:
    (('0'..'9')+ ('.' ('0'..'9')*) | '.' ('0'..'9')+)
    (('e' | 'E') ('+' | '-')? ('0'..'9')+)?;