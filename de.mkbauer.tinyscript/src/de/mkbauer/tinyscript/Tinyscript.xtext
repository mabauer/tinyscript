grammar de.mkbauer.tinyscript.Tinyscript hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate ts "http://www.mkbauer.de/tinyscript/Tinyscript"

Tinyscript :
	global=Global
;

Global returns Block:
	{Block}
	(statements += Statement)*
;

Block: 
	{Block}
	'{' (statements += Statement)* '}'	
;

Statement:
	(=> FunctionDeclaration) | 
	(=> BlockStatement) |
	VariableStatement | 
	ExpressionStatement | 
	ReturnStatement | 
	IfStatement |
	NumericForStatement |
	ForEachStatement |
	BreakStatement |
	AssertStatement |
	EmptyStatement
;

EmptyStatement:
	';'
;

BlockStatement:
	block = Block
;

FunctionDeclaration returns Function:
	{FunctionDeclaration}
	'function' ( id=Identifier ) '(' (params += Identifier)? (',' params += Identifier)* ')' block=Block 
;

ExpressionStatement:
	AssignmentExpression ';'
;

// TODO: Simplify expression hierarchy:
// - Use tree rewrites to use BinaryOperation, UnaryOperation
// - Split compare into equality and relational expressions  
// see https://github.com/eclipse/xtext/blob/master/plugins/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/Xbase.xtext
AssignmentExpression returns Expression:
	OrExpression ({BinaryExpression.left=current} op=OP_ASSIGN right=AssignmentExpression)?	
;

OrExpression returns Expression:
	AndExpression ({BinaryExpression.left=current} op=('||') right=AndExpression)*
;

AndExpression returns Expression:
	EqualityExpression  ({BinaryExpression.left=current} op=('&&') right=EqualityExpression)*
;

EqualityExpression returns Expression:
	CompareExpression ({BinaryExpression.left=current} op=OP_EQUALS right=CompareExpression)?
;

CompareExpression returns Expression:
	Addition ({BinaryExpression.left=current} op=OP_COMP right=Addition)?
;

Addition returns Expression:
	Multiplication ({BinaryExpression.left=current} op=('+' | '-') right=Multiplication)*
;

Multiplication returns Expression:
    (Unary | Primary) ({BinaryExpression.left=current} op=('*' | '/') right=(Unary | Primary))*
;

Unary:
	(op='-'|OP_NOT) expr=Primary // ExpressionStatement?
;

Primary returns Expression:
	(Atomic  | '(' AssignmentExpression ')' ) ({CallOrPropertyAccess.expr=current} suffix=CallOrPropertyAccessSuffix)*  
;

Atomic:
	Reference |
	BooleanLiteral |
	NumberLiteral |
    StringLiteral |
    ObjectInitializer |
    ArrayInitializer | 
    FunctionExpression
;

FunctionExpression returns Function:
	'function' ( id=Identifier )? '(' (params += Identifier)? (',' params += Identifier)* ')' block=Block 
;

ReturnStatement:
	{ReturnStatement}
	'return' (expr=AssignmentExpression)? ';'
;

AssertStatement:
	'assert' cond=AssignmentExpression ';'
;

IfStatement:
	'if' '(' cond=AssignmentExpression ')' then=Block
	(else=ElseStatement)?
	;
	
ElseStatement:
	'else' else=Block
;

ForEachStatement:
	'foreach' '(' ((KW_VAR id=Identifier) | ref=Reference) 'in' object=AssignmentExpression ')' do=Block 
;

NumericForStatement:
	'for' '(' ((KW_VAR id=Identifier) | ref=Reference) OP_ASSIGN start=Addition ',' stop=Addition (',' step=Addition )? ')' do=Block
;

BreakStatement:
	{BreakStatement}
	'break' ';'
;

VariableStatement:
	KW_VAR (vardecls += VariableDeclaration) (',' vardecls += VariableDeclaration)* ';'
;

VariableDeclaration returns Expression:
	Identifier ({BinaryExpression.left=current} op=OP_ASSIGN right=AssignmentExpression)?
;

Reference:
	// TODO: Handle undeclared values as properties of the global context
	id=[Identifier] | this?='this'  
;

Identifier:
	name=ID
;

CallOrPropertyAccessSuffix:
	PropertyAccessSuffix | CallSuffix
;

CallSuffix:
	{CallSuffix}
	'(' (arguments += AssignmentExpression)? (',' arguments += AssignmentExpression)* ')' 
;

PropertyAccessSuffix:
	ComputedPropertyAccessSuffix | DotPropertyAccessSuffix
;

ComputedPropertyAccessSuffix:
	'[' key=Addition ']'  // TODO: AssignmentExpression?
;
	
DotPropertyAccessSuffix:
	'.' key=PropertyName 
;

ObjectInitializer:
	{ObjectInitializer}
	'{' (propertyassignments+=PropertyAssignment)? (',' propertyassignments+=PropertyAssignment)* '}'
;

PropertyAssignment:
	key=PropertyName ':' value=AssignmentExpression
;

PropertyName:
	expr=StringLiteral |
	name=ID
;

ArrayInitializer:
	{ArrayInitializer}
	'[' (values+=Atomic)? (',' values += Atomic)* ']'  
;

RangeExpression:
	start=NumberLiteral ',' end=NumberLiteral	
;

StringLiteral:
	value=STRING
;

BooleanLiteral:
	value=BOOLEAN
;

NumberLiteral:
	value=DOUBLE
;

terminal OP_EQUALS:
	'==' | '===' | '!=' | '!=='
;

terminal OP_COMP:
    '<' | '<=' | '>' | '>='
;

terminal OP_ASSIGN:
	'='
;

terminal OP_NOT:
	'!'
;

terminal KW_VAR:
	'var' | 'let'
;

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false'
;

terminal DOUBLE returns ecore::EDouble:
    (('0'..'9')+ ('.' ('0'..'9')*)? | '.' ('0'..'9')+)
    (('e' | 'E') ('+' | '-')? ('0'..'9')+)?;
    
terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;