grammar de.mkbauer.tinyscript.Tinyscript with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate ts "http://www.mkbauer.de/tinyscript/Tinyscript"

Tinyscript:
	elements=SourceElements
;

SourceElements:
	{SourceElements}
	(statements += Statement)? (';' statements += Statement)* (';')?
;

Block: 
	'{' sourceelements=SourceElements '}'	
;

Statement:
	(=> FunctionDeclaration) | VariableStatement | ExpressionStatement | ReturnStatement   
;

FunctionDeclaration:
	'function' ( name=ID ) '(' params=FormalParameterList? ')' block=Block 
;

ExpressionStatement:
	AssignmentExpression 
;

// TODO: Simplify expression hierarchy:
// - Use tree rewrites to use BinaryOperation, UnaryOperation
// - Split compare into equality and relational expressions  
// see https://github.com/eclipse/xtext/blob/master/plugins/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/Xbase.xtext
AssignmentExpression returns Expression:
	EqualityExpression ({BinaryExpression.left=current} op=OP_ASSIGN right=AssignmentExpression)?	
;

EqualityExpression returns Expression:
	CompareExpression ({BinaryExpression.left=current} op=OP_EQUALS right=CompareExpression)?
;

CompareExpression returns Expression:
	OrExpression ({BinaryExpression.left=current} op=OP_COMP right=OrExpression)?
;

OrExpression returns Expression:
	AndExpression ({BinaryExpression.left=current} op=('||') right=AndExpression)*
;

AndExpression returns Expression:
	Addition  ({BinaryExpression.left=current} op=('&&') right=Addition)*
;

Addition returns Expression:
	Multiplication ({BinaryExpression.left=current} op=('+' | '-') right=Multiplication)*
;

Multiplication returns Expression:
    (Unary | Primary) ({BinaryExpression.left=current} op=('*' | '/') right=(Unary | Primary))*
;

Unary:
	(op='-'|OP_NOT) expr=Primary // ExpressionStatement?
;

Primary:
	(expr=Atomic  | '(' expr=ExpressionStatement ')' ) (suffixes+=CallOrMemberSuffix)*  
;

Atomic:
	VariableOrMember |
	IntegerLiteral |
	DoubleLiteral |
    StringLiteral |
    ObjectInitializer |
    ArrayInitializer | 
    FunctionExpression
;

FunctionExpression:
	'function' ( name=ID )? '(' params=FormalParameterList? ')' block=Block 
;


FormalParameterList:
	(params += Variable) (',' params += Variable)*
;

ReturnStatement:
	{Return}
	'return' (expr=AssignmentExpression)?
;

VariableStatement:
	'var' vardecllist=VariableDeclarationList
;

VariableDeclarationList:
	(vardecls += VariableDeclaration) (',' vardecls += VariableDeclaration)*
;

VariableDeclaration:
	var=Variable (OP_ASSIGN expr=AssignmentExpression)?
;

VariableOrMember:
	var=[Variable] | this?='this'  
;

Variable:
	name=ID
;

// TODO: Remove rule
CallOrMemberSuffix:
	{CallOrMemberSuffix}
	((membersuffix = MemberSuffix) | (callsuffix = CallSuffix))
;

CallSuffix:
	{CallSuffix}
	'(' arguments=ArgumentList? ')' 
;

ArgumentList:
	(arguments += AssignmentExpression) (',' arguments += AssignmentExpression)*
;

MemberSuffix:
	('[' expr=Addition ']' | // TODO: AssignmentExpression?
	'.' name=ID ) 
;

ObjectInitializer:
	{ObjectInitializer}
	'{' (propertyassignments+=PropertyAssignment)? (',' propertyassigments+=PropertyAssignment)* '}'
;

PropertyAssignment:
	key=PropertyName ':' value=AssignmentExpression
;

PropertyName:
	expr=StringLiteral |
	name=ID
;

ArrayInitializer:
	{ArrayInitializer}
	'[' (values+=Atomic)? (',' values += Atomic)* ']'  
;

StringLiteral:
	value=STRING
;

// TODO: Add boolean literal

// TODO: Remove
IntegerLiteral:
    value=INT
;

DoubleLiteral:
	value=DOUBLE
;

terminal OP_EQUALS:
	'==' | '===' | '!=' | '!=='
;

terminal OP_COMP:
	'==' | '===' | '!=' | '<' | '<=' | '>' | '>='
;

terminal OP_ASSIGN:
	'='
;

terminal OP_NOT:
	'!'
;

terminal DOUBLE returns ecore::EDouble:
    (('0'..'9')+ ('.' ('0'..'9')*) | '.' ('0'..'9')+)
    (('e' | 'E') ('+' | '-')? ('0'..'9')+)?;