grammar de.mkbauer.tinyscript.Tinyscript hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate ts "http://www.mkbauer.de/tinyscript/Tinyscript"

Tinyscript :
	global=Global
;

Global returns Block:
	{Block}
	(statements += Statement)*
;

Block: 
	{Block}
	'{' (statements += Statement)* '}'	
;

Statement:
	(=> FunctionDeclaration) | 
	(=> BlockStatement) |
	VariableStatement | 
	ExpressionStatement | 
	ReturnStatement | 
	IfStatement |
	ForStatement |
	BreakStatement |
	AssertStatement |
	EmptyStatement
;

EmptyStatement:
	';'
;

BlockStatement:
	block = Block
;

FunctionDeclaration returns FunctionDefinition:
	{FunctionDeclaration}
	'function' ( id=Identifier ) '(' (params += Identifier)? (',' params += Identifier)* ')' block=Block 
;

ExpressionStatement:
	expr=AssignmentExpression ';'
;

AssignmentExpression returns Expression:
	(OrExpression|ArrowFunctionDefinition) ({BinaryExpression.left=current} op=OP_ASSIGN right=AssignmentExpression)?	
;

ArrowFunctionDefinition returns FunctionDefinition:
	{ArrowFunction}
	( (params+=Identifier) | ('(' params += Identifier? ')') )  '=>' (block=ArrowFunctionBlock /* | => (code=Block) */ )
;

ArrowFunctionBlock returns Block:
	statements += ExpressionStatementWithoutSemicolon
;

ExpressionStatementWithoutSemicolon returns ExpressionStatement:
	expr=OrExpression
;

OrExpression returns Expression:
	AndExpression ({BinaryExpression.left=current} op=('||') right=AndExpression)*
;

AndExpression returns Expression:
	EqualityExpression  ({BinaryExpression.left=current} op=('&&') right=EqualityExpression)*
;

EqualityExpression returns Expression:
	CompareExpression ({BinaryExpression.left=current} op=OP_EQUALS right=CompareExpression)?
;

CompareExpression returns Expression:
	Addition ({BinaryExpression.left=current} op=OP_COMP right=Addition)?
;

Addition returns Expression:
	Multiplication ({BinaryExpression.left=current} op=('+' | '-') right=Multiplication)*
;

Multiplication returns Expression:
    (Unary | Primary ) ({BinaryExpression.left=current} op=('*' | '/' | '%' ) right=(Unary | Primary ))*
;

Unary:
	op=('-'|OP_NOT) expr=Primary // ExpressionStatement?
;

Primary returns Expression:
	((Atomic  | NewExpression | GroupingExpression ) ({CallOrPropertyAccess.expr=current} suffix=(CallOrPropertyAccessSuffix|CallSuffix))* )
	| TypeOfExpression 
	| NullObject
;

GroupingExpression:
	'(' expr=AssignmentExpression ')'
;

NewExpression:
	'new' (expr=Atomic | => '(' expr=AssignmentExpression ')' )
;

Atomic:
	Reference |
	BooleanLiteral |
	NumberLiteral |
    StringLiteral |
    ObjectInitializer |
    ArrayInitializer | 
    FunctionExpression
;

FunctionExpression returns FunctionDefinition:
	'function' ( id=Identifier )? '(' (params += Identifier)? (',' params += Identifier)* ')' block=Block 
;

ReturnStatement:
	{ReturnStatement}
	'return' (expr=AssignmentExpression)? ';'
;

AssertStatement:
	'assert' cond=AssignmentExpression ';'
;

IfStatement:
	'if' '(' cond=AssignmentExpression ')' then=Block
	(else=ElseStatement)?
	;
	
ElseStatement:
	'else' else=Block
;

ForStatement:
	'for' '(' ((KW_VAR id=Identifier) | ref=Reference) (numericForExpr=NumericForExpression | iterableForExpr=IterableForExpression) ')' do=Block
;

NumericForExpression:
	OP_ASSIGN start=Addition ',' stop=Addition (',' step=Addition )?
;

IterableForExpression:
	':' iterable=Addition 
;

BreakStatement:
	{BreakStatement}
	'break' ';'
;

VariableStatement:
	KW_VAR (vardecls += VariableDeclaration) (',' vardecls += VariableDeclaration)* ';'
;

VariableDeclaration returns Expression:
	Identifier ({BinaryExpression.left=current} op=OP_ASSIGN right=AssignmentExpression)?
;

Reference:
	id=[Identifier] | this?='this'  
;

Identifier:
	name=ID
;

CallOrPropertyAccessSuffix:
	{CallOrPropertyAccessSuffix}
	(property=PropertyAccessSuffix) =>(call=CallSuffix)?
;

CallSuffix:
	{CallSuffix}
	'(' (arguments += AssignmentExpression)? (',' arguments += AssignmentExpression)* ')' 
;

PropertyAccessSuffix:
	ComputedPropertyAccessSuffix | DotPropertyAccessSuffix
;

ComputedPropertyAccessSuffix:
	'[' key=Addition ']'  // TODO: AssignmentExpression?
;
	
DotPropertyAccessSuffix:
	'.' key=PropertyName 
;

ObjectInitializer:
	{ObjectInitializer}
	'{' (propertyassignments+=PropertyAssignment)? (',' propertyassignments+=PropertyAssignment)* '}'
;

PropertyAssignment:
	key=PropertyName ':' value=AssignmentExpression
;

PropertyName:
	expr=StringLiteral |
	name=ID
;

ArrayInitializer:
	{ArrayInitializer}
	'[' (values+=Addition)? (',' values += Addition)* ']'  
;

RangeExpression:
	start=NumberLiteral ',' end=NumberLiteral	
;

TypeOfExpression:
	'typeof' name=ID (suffixes+=DotPropertyAccessSuffix)*
;

NullObject returns Expression:
	{NullObject}
	'null'
;

StringLiteral:
	value=STRING
;

BooleanLiteral:
	value=BOOLEAN
;

NumberLiteral:
	value=DOUBLE
;

terminal OP_EQUALS:
	'==' | '===' | '!=' | '!=='
;

terminal OP_COMP:
    '<' | '<=' | '>' | '>=' | 'instanceof'
;

terminal OP_ASSIGN:
	'='
;

terminal OP_NOT:
	'!'
;

terminal KW_VAR:
	'var' | 'let'
;

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false'
;

terminal DOUBLE returns ecore::EDouble:
    (('0'..'9')+ ('.' ('0'..'9')*)? | '.' ('0'..'9')+)
    (('e' | 'E') ('+' | '-')? ('0'..'9')+)?;
    
terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;